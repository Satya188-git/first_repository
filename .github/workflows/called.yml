name: Reusable Workflow

on:
  workflow_call:
    inputs:
      environment:
        description: "Target Environment"
        required: true
        type: string
      awsRegionCode:
        description: "AWS Region Code"
        required: true
        type: string
      awsRegionAbbreviation:
        description: "AWS Region Abbreviation"
        required: true
        type: string
      s3ArtifactBucketSuffix: 
        required: true
        type: string
        default: "s3-tf-artifacts"
      s3ArtifactBucketFolder: 
        required: true
        type: string
        default: "pipeline-artifact"
      s3LambdaObjectKey1: 
        required: true
        type: string
        default: "ccc_audit_call_lambda.zip"
      lambdaFunctionName1: 
        required: true
        type: string
        default: "lambda-audit-call" 
      organization:
        required: true
        type: string
        default: "socal"   
      applicationcode:
        required: true
        type: string
        default: "dmeti"  
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Debug AWS Credentials
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ inputs.awsRegionCode }}
        run: |
          echo "Checking AWS credentials..."
          if [ -z "$AWS_ACCESS_KEY_ID" ]; then
            echo "AWS_ACCESS_KEY_ID is not set!"
            exit 1
          fi
          if [ -z "$AWS_SECRET_ACCESS_KEY" ]; then
            echo "AWS_SECRET_ACCESS_KEY is not set!"
            exit 1
          fi
          aws sts get-caller-identity --region $AWS_REGION

      - name: Publish Artifacts for Quicksight and Athena Views
        run: |
            echo "Configuring AWS credentials..."
            export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
            export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
                
      
              #############################
              ###   Set the AWS region  ###
              #############################
      
            export AWS_DEFAULT_REGION="us-west-2"
            OUTPUT_PROFILE="AWSCLI-AssumeRole"
      
              #################################################
              ## Assume the role and capture the credentials ##
              #################################################
      
            echo "Assuming role..."
            ASSUME_ROLE_OUTPUT=$(aws sts assume-role --role-arn "arn:aws:iam::891612551190:role/sdge-dcctr-dev-iam-role-ado" --role-session-name "$OUTPUT_PROFILE" --output json)
              
              #####################################################
              ## Check if the assume-role command was successful ##
              #####################################################
            if [ $? -eq 0 ]; then
            echo "assumed role successfully"
            fi  
            
            aws lambda create-function \
            --function-name "${{ inputs.organization }}-${{ inputs.applicationCode }}-${{ inputs.environment }}-${{ inputs.awsRegionAbbreviation }}-lambdaFunctionName1" \
            --s3-bucket "${{ inputs.organization }}-${{ inputs.applicationCode }}-${{ inputs.environment }}-${{ inputs.awsRegionAbbreviation }}-${{ inputs.s3ArtifactBucketSuffix }}" \
            --s3-key "${{ inputs.s3ArtifactBucketFolder }}/lambdaFunctionName1.zip" \
            --region "${{ inputs.awsRegionCode }}"      
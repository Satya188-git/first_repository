name: Lambda Deployment

on:
  workflow_call:  # Enables this workflow to be called from another workflow
    

    inputs:
      environment:
        description: "Target Environment"
        required: true
        type: string
    


      awsRegionCode: 
        description: 'Deployment Environment'
        required: true
        type: string
        default: "us-west-2"
      awsRegionAbbreviation: 
        description: 'Deployment Environment'
        required: true
        type: string
        default: "wus2"
      s3ArtifactBucketSuffix: 
        required: true
        type: string
        default: "s3-tf-artifacts"
      s3ArtifactBucketFolder: 
        required: true
        type: string
        default: "pipeline-artifact"
      s3LambdaObjectKey1: 
        required: true
        type: string
        default: "ccc_audit_call_lambda.zip"
      lambdaFunctionName1: 
        required: true
        type: string
        default: "lambda-audit-call"

    secrets: 
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
      
        required: true    

jobs:
  deploy-lambda:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up AWS CLI and jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Set up AWS CLI
        run: |
            mkdir -p ~/.aws
            echo "[default]" > ~/.aws/credentials
            echo "aws_access_key_id = $AWS_ACCESS_KEY_ID" >> ~/.aws/credentials
            echo "aws_secret_access_key = $AWS_SECRET_ACCESS_KEY" >> ~/.aws/credentials

      - name: Set up AWS Credentials
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ inputs.awsRegionCode }}
        run: |
          echo "Configuring AWS credentials..."
          aws sts get-caller-identity       

      - name: Debug AWS Credentials
        run: |
          if [ -z "$AWS_ACCESS_KEY_ID" ]; then
            echo "AWS_ACCESS_KEY_ID is not set!"
            exit 1
          else
            echo "AWS_ACCESS_KEY_ID is set."
          fi           
            

      - name: Assume Role and Deploy Lambda
        env:
          ROLE_ARN: arn:aws:iam::891612551190:role/sdge-dcctr-${{ inputs.environment }}-iam-role-ado
        run: |
          echo "Assuming role for environment: ${{ inputs.environment }}"
          ASSUME_ROLE=$(aws sts assume-role \
            --role-arn "$ROLE_ARN" \
            --role-session-name "GitHubActionsSession" \
            --output json)

          export AWS_ACCESS_KEY_ID=$(echo $ASSUME_ROLE | jq -r '.Credentials.AccessKeyId')
          export AWS_SECRET_ACCESS_KEY=$(echo $ASSUME_ROLE | jq -r '.Credentials.SecretAccessKey')
          export AWS_SESSION_TOKEN=$(echo $ASSUME_ROLE | jq -r '.Credentials.SessionToken')
          export AWS_DEFAULT_REGION=${{ inputs.awsRegionCode }}

          echo "Deploying Lambda function: ${{ inputs.lambdaFunctionName1 }}"
    
      - name: Publish Artifacts for Quicksight and Athena Views
        run: |
          echo "Configuring AWS credentials..."
          export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
          export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
              
    
            #############################
            ###   Set the AWS region  ###
            #############################
    
          export AWS_DEFAULT_REGION="us-west-2"
          OUTPUT_PROFILE="AWSCLI-AssumeRole"
    
            #################################################
            ## Assume the role and capture the credentials ##
            #################################################
    
          echo "Assuming role..."
          ASSUME_ROLE_OUTPUT=$(aws sts assume-role --role-arn "arn:aws:iam::891612551190:role/sdge-dcctr-dev-iam-role-ado" --role-session-name "$OUTPUT_PROFILE" --output json)
            
            #####################################################
            ## Check if the assume-role command was successful ##
            #####################################################
          if [ $? -eq 0 ]; then
          echo "assumed role successfully"
          fi
      # - name: Deploy Lambda Function 1
      #   env:
      #     organization: socal
      #     applicationcode: dmeti
      #   run: |
      #     echo "Configuring AWS credentials..."
      #     export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID}}"
      #     export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" 
           
      #     export AWS_DEFAULT_REGION="us-west-2"
      #     OUTPUT_PROFILE="AWSCLI-AssumeRole"
        
      #     echo "Assuming role..."
      #     ASSUME_ROLE_OUTPUT=$(aws sts assume-role --role-arn "arn:aws:iam::891612551190:role/sdge-dcctr-dev-iam-role-ado" --role-session-name "$OUTPUT_PROFILE" --output json)
        
       
      #     aws lambda create-function \
      #       --function-name "${{ env.organization }}-${{env.applicationCode }}-${{ inputs.environment }}-${{ inputs.awsRegionAbbreviation }}-lambdaFunctionName1" \
      #       --s3-bucket "${{ env.organization }}-${{ env.applicationCode }}-${{ inputs.environment }}-${{ inputs.awsRegionAbbreviation }}-${{ inputs.s3ArtifactBucketSuffix }}" \
      #       --s3-key "${{ inputs.s3ArtifactBucketFolder }}/lambdaFunctionName1.zip" \
      #       --region "${{ inputs.awsRegionCode }}"
      
  

